apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../config/quality/quality.gradle'

// Load sensitive project properties
ext.projectProps = {
    def props = new Properties()
    def file = rootProject.file("project.properties")
    if (file.exists()) {
        props.load(new FileInputStream(file))
    }
    return props
}()

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.sagarnileshshah.carouselmvp"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.setUseSupportLibrary true
        buildConfigField "String", "FLICKR_API_KEY", projectProps.getProperty("flickrApiKey", "\"TEST\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {}
    }

    productFlavors {
        mock {
            applicationIdSuffix ".mock"
        }
        prod {}
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    dbflowVersion = "4.0.0-beta5"
    supportLibVersion = "25.3.0"
    butterKnifeVersion = "8.5.1"
    glideVersion = "3.7.0"
    okhttpVersion = "3.6.0"
    retrofitVersion = "2.2.0"
    stethoOkhttpVersion = "1.4.2"
    gsonVersion = "2.8.0"
    parcelerVersion = "1.1.6"
    junitVersion = "4.12"
    mockitoVersion = "2.7.19"
    espressoCoreVersion = "2.2.2"
    daggerVersion = "2.9"
    jsrVersion = "1.0"
    rxAndroidVersion = "1.2.0"
    rxJavaVersion = "1.1.4"
    timberVersion = "4.5.1"
    leakCanaryVersion = "1.5"
    crashlyticsVersion = "2.6.7"
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha8'
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:support-vector-drawable:${supportLibVersion}"
    compile "com.android.support:animated-vector-drawable:${supportLibVersion}"

    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    compile "com.github.bumptech.glide:glide:${glideVersion}"
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.facebook.stetho:stetho:${stethoOkhttpVersion}"
    compile "com.facebook.stetho:stetho-okhttp3:${stethoOkhttpVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"
    compile "org.parceler:parceler-api:${parcelerVersion}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${dbflowVersion}"
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex:rxjava:${rxJavaVersion}"
    compile "com.jakewharton.timber:timber:${timberVersion}"
    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}@aar") {
        transitive = true;
    }


    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-android:${mockitoVersion}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoCoreVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflowVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"
    annotationProcessor "org.parceler:parceler:${parcelerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    provided "javax.annotation:jsr250-api:${jsrVersion}"
}

